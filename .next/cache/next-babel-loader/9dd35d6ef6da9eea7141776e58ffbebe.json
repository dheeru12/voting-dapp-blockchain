{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport voting from '../../Voting';\nimport web3 from '../../web3';\nimport Layout from '../../components/Layout';\nimport { Header, Segment, Button, Message } from 'semantic-ui-react';\nimport { Router } from '../../routes';\n\nclass candidateShow extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorMessage: \"\",\n      disabled: false,\n      loading: false,\n      successMessage: ''\n    });\n\n    _defineProperty(this, \"onClick\", async event => {\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await voting.methods.vote(this.props.id).send({\n          from: accounts[0],\n          gas: '1000000'\n        });\n        this.setState({\n          loading: false,\n          disabled: true,\n          successMessage: 'you have successfully voted'\n        });\n        Router.pushRoute(`/candidates/${this.props.id}`);\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loading: false,\n        successMessage: \"\"\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    const candidate = await voting.methods.candidates(props.query.id).call();\n    return {\n      candidate,\n      id: parseInt(props.query.id)\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({\n      loading: false,\n      disabled: true,\n      successMessage: 'you have successfully voted'\n    });\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts[0]);\n    const bool = await voting.methods.voters(accounts[0]).call();\n\n    if (bool) {\n      this.setState({\n        disabled: true,\n        successMessage: \"you have voted already\"\n      });\n    }\n  }\n\n  renderMessage() {\n    if (this.state.errorMessage) {\n      return __jsx(Message, {\n        content: this.state.errorMessage,\n        error: true\n      });\n    }\n\n    if (this.state.successMessage) {\n      return __jsx(Message, {\n        content: \"You have successfully voted\",\n        success: true\n      });\n    }\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"div\", null, __jsx(Header, {\n      as: \"h3\",\n      attached: \"top\"\n    }, this.props.candidate.name), __jsx(Segment, {\n      attached: true,\n      inverted: true\n    }, __jsx(\"div\", null, __jsx(Header, {\n      as: \"h4\",\n      color: \"red\"\n    }, \"current Votes:\"), this.props.candidate.votes), __jsx(\"div\", {\n      style: {\n        marginTop: \"5px\"\n      }\n    }, __jsx(Header, {\n      as: \"h4\",\n      color: \"red\"\n    }, \"party:\"), this.props.candidate.party), __jsx(\"div\", {\n      style: {\n        marginTop: \"5px\"\n      }\n    }, __jsx(Header, {\n      as: \"h4\",\n      color: \"red\"\n    }, \"description:\"), this.props.candidate.description), __jsx(\"div\", null, __jsx(Button, {\n      style: {\n        marginLeft: \"500px\"\n      },\n      color: \"green\",\n      onClick: this.onClick,\n      disabled: this.state.disabled,\n      loading: this.state.loading\n    }, \"Vote\"))), this.renderMessage()));\n  }\n\n}\n\nexport default candidateShow;","map":{"version":3,"sources":["/home/dheeru12/projects/voting/pages/candidates/show.js"],"names":["React","Component","voting","web3","Layout","Header","Segment","Button","Message","Router","candidateShow","errorMessage","disabled","loading","successMessage","event","setState","accounts","eth","getAccounts","methods","vote","props","id","send","from","gas","pushRoute","err","message","getInitialProps","candidate","candidates","query","call","parseInt","componentDidMount","console","log","bool","voters","renderMessage","state","render","name","votes","marginTop","party","description","marginLeft","onClick"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport voting from '../../Voting';\nimport web3 from '../../web3';\nimport Layout from '../../components/Layout';\nimport {Header,Segment, Button, Message} from 'semantic-ui-react';\nimport {Router} from '../../routes';\nclass candidateShow extends Component{\n    state={\n        errorMessage:\"\",\n        disabled:false,\n        loading:false,\n        successMessage:'',\n    }\n    static async getInitialProps(props){\n        const candidate=await voting.methods.candidates(props.query.id).call();\n        return {candidate,id:parseInt(props.query.id)};\n    }\n    async componentDidMount(){\n        this.setState({loading:false,disabled:true,successMessage:'you have successfully voted'});\n        const accounts=await web3.eth.getAccounts();\n        console.log(accounts[0]);\n        const bool=await voting.methods.voters(accounts[0]).call()\n        if(bool){\n            this.setState({disabled:true,successMessage:\"you have voted already\"});\n        }\n    }\n    onClick=async(event)=>{\n        this.setState({loading:true});\n        try{\n            const accounts=await web3.eth.getAccounts();\n            await voting.methods.vote(this.props.id).send({from:accounts[0],gas:'1000000'});\n            this.setState({loading:false,disabled:true,successMessage:'you have successfully voted'});\n            Router.pushRoute(`/candidates/${this.props.id}`)\n        }catch(err){\n            this.setState({errorMessage:err.message})\n        }\n        this.setState({loading:false,successMessage:\"\"});\n    };\n    renderMessage(){\n        if(this.state.errorMessage){\n            return (\n                <Message content={this.state.errorMessage} error></Message>\n            );\n        }\n        if(this.state.successMessage){\n            return (\n                <Message content=\"You have successfully voted\" success></Message>\n            );\n        }\n        \n    }\n    render(){\n        return (\n            <Layout>\n                <div>\n                    <Header as=\"h3\" attached=\"top\">{this.props.candidate.name}</Header>\n                    <Segment attached inverted >\n                        <div>\n                            <Header as=\"h4\" color=\"red\">current Votes:</Header>\n                            {this.props.candidate.votes}\n                        </div>\n                        <div style={{marginTop:\"5px\"}}>\n                            <Header as=\"h4\" color=\"red\">party:</Header>\n                            {this.props.candidate.party}\n                        </div>\n                        <div style={{marginTop:\"5px\"}}>\n                            <Header as=\"h4\" color=\"red\">description:</Header>\n                            {this.props.candidate.description}\n                        </div>\n                        <div>\n                        <Button style={{marginLeft:\"500px\"}} color=\"green\" onClick={this.onClick} disabled={this.state.disabled} loading={this.state.loading}>\n                            Vote\n                        </Button>\n                        </div>\n                    </Segment>\n                    {this.renderMessage()}\n                </div>\n            </Layout>\n        );\n    }\n}\n\nexport default candidateShow;"]},"metadata":{},"sourceType":"module"}